// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          UserRole  @default(STUDENT)
  isActive      Boolean   @default(true)

  accounts      Account[]
  sessions      Session[]
  enrollments   Enrollment[]
  subscriptions Subscription[]
  payments      Payment[]
  reviews       Review[]
  comments      Comment[]
  userProgress  UserProgress[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String
  slug        String   @unique
  thumbnail   String?
  price       Float
  isPublished Boolean  @default(false)
  isFree      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  category    String
  level       CourseLevel
  duration    Int // in minutes
  instructor  String
  tags        String[]

  chapters    Chapter[]
  enrollments Enrollment[]
  reviews     Review[]
  payments    Payment[]
  categoryRef Category @relation(fields: [category], references: [id])
}

model Chapter {
  id          String   @id @default(cuid())
  title       String
  description String?
  videoUrl    String?
  position    Int
  isPublished Boolean  @default(false)
  isFree      Boolean  @default(false)
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userProgress UserProgress[]
}

model UserProgress {
  id        String   @id @default(cuid())
  userId    String
  chapterId String
  isCompleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userId, chapterId])
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  enrolledAt DateTime @default(now())
  status    EnrollmentStatus @default(ACTIVE)

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model Subscription {
  id        String   @id @default(cuid())
  userId    String
  planId    String
  status    SubscriptionStatus @default(ACTIVE)
  startDate DateTime @default(now())
  endDate   DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan      Plan     @relation(fields: [planId], references: [id])
}

model Plan {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  duration    Int // in days
  features    String[]
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subscriptions Subscription[]
  payments      Payment[]
}

model Payment {
  id            String   @id @default(cuid())
  userId        String
  amount        Float
  currency      String   @default("USD")
  status        PaymentStatus @default(PENDING)
  paymentMethod PaymentMethod
  stripePaymentIntentId String?
  courseId      String?
  planId        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course        Course?  @relation(fields: [courseId], references: [id])
  plan          Plan?    @relation(fields: [planId], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model Article {
  id          String   @id @default(cuid())
  title       String
  content     String
  slug        String   @unique
  excerpt     String?
  thumbnail   String?
  isPublished Boolean  @default(false)
  author      String
  tags        String[]
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  comments    Comment[]
  categoryRef Category @relation(fields: [category], references: [id])
}

model Blog {
  id          String   @id @default(cuid())
  title       String
  content     String
  slug        String   @unique
  excerpt     String?
  thumbnail   String?
  isPublished Boolean  @default(false)
  author      String
  tags        String[]
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  comments    Comment[]
  categoryRef Category @relation(fields: [category], references: [id])
}

model Video {
  id          String   @id @default(cuid())
  title       String
  description String?
  videoUrl    String
  thumbnail   String?
  duration    Int // in seconds
  isPublished Boolean  @default(false)
  author      String
  tags        String[]
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  comments    Comment[]
  categoryRef Category @relation(fields: [category], references: [id])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  articleId String?
  blogId    String?
  videoId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  blog      Blog?    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  video     Video?   @relation(fields: [videoId], references: [id], onDelete: Cascade)
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  courses     Course[]
  articles    Article[]
  blogs       Blog[]
  videos      Video[]
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  GOOGLE_PAY
  UPI
  STRIPE
}
